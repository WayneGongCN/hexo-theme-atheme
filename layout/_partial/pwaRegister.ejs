<% var pwaConf = theme.pwa || {}; %>

<!-- PWA -->
<% if (pwaConf.enable) { %>
<script>
  navigator &&
    navigator.serviceWorker &&
    navigator.serviceWorker.register("/sw.js");
</script>
<% } %>

<!-- WEB PUSH -->
<% if (pwaConf.enable && pwaConf.webPush) { %>
<script>
  navigator &&
    navigator.serviceWorker &&
    navigator.serviceWorker.ready
      .then((registration) => {

        return registration.pushManager
          .getSubscription()
          .then((subscription) => {
            if (subscription) return subscription;
            return subscribe(registration);
          });
      })
      .then(saveSubscription)
      .catch(e => {
        console.warn(`订阅失败`, e)
      })


  function saveSubscription(subscription) {
    return fetch("<%- pwaConf.subscriptionUrl %>", {
      method: "post",
      headers: { "Content-type": "application/json" },
      body: JSON.stringify({ subscription }),
    }).then(res => res.ok ? res : Promise.reject(res))
  }


  function subscribe(registration) {
    const convertedVapidKey = urlBase64ToUint8Array("<%- pwaConf.publicKey %>");
    return registration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: convertedVapidKey,
    });
  }


  function urlBase64ToUint8Array(base64String) {
    var padding = "=".repeat((4 - (base64String.length % 4)) % 4);
    var base64 = (base64String + padding)
      .replace(/\-/g, "+")
      .replace(/_/g, "/");

    var rawData = window.atob(base64);
    var outputArray = new Uint8Array(rawData.length);

    for (var i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  }
</script>
<% } %>
